{
  "contractName": "Booster",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "depositLogs",
      "outputs": [
        {
          "name": "stage",
          "type": "bytes32"
        },
        {
          "name": "client",
          "type": "bytes32"
        },
        {
          "name": "value",
          "type": "bytes32"
        },
        {
          "name": "assetID",
          "type": "bytes32"
        },
        {
          "name": "flag",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetAddresses",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assetAddressesArray",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "withdrawalLogs",
      "outputs": [
        {
          "name": "stage",
          "type": "bytes32"
        },
        {
          "name": "client",
          "type": "bytes32"
        },
        {
          "name": "value",
          "type": "bytes32"
        },
        {
          "name": "assetID",
          "type": "bytes32"
        },
        {
          "name": "flag",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stages",
      "outputs": [
        {
          "name": "receiptRootHash",
          "type": "bytes32"
        },
        {
          "name": "accountRootHash",
          "type": "bytes32"
        },
        {
          "name": "data",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "instantWithdrawMaximum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "goblin",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "depositSequenceNumber",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "managerAddress",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stageHeight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_boosterOwner",
          "type": "address"
        },
        {
          "name": "_goblin",
          "type": "address"
        },
        {
          "name": "_assetAddresses",
          "type": "address[]"
        },
        {
          "name": "_instantWithdrawMaximum",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_dsn",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "_client",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_assetID",
          "type": "bytes32"
        }
      ],
      "name": "ProposeDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_type",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_gsn",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_lightTxHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_fromBalance",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_toBalance",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_sigLightTx",
          "type": "bytes32[3]"
        },
        {
          "indexed": false,
          "name": "_sigReceipt",
          "type": "bytes32[3]"
        }
      ],
      "name": "VerifyReceipt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_wsn",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "_client",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_assetID",
          "type": "bytes32"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_stageHeight",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_receiptRootHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_accountRootHash",
          "type": "bytes32"
        }
      ],
      "name": "Attach",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_challengedType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_client",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "_lightTxHash",
          "type": "bytes32"
        }
      ],
      "name": "Challenge",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "asAddress",
          "type": "address"
        }
      ],
      "name": "setAssetAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "asAddress",
          "type": "address"
        }
      ],
      "name": "unsetAssetAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAssetAddressesLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        }
      ],
      "name": "proposeTokenDeposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        }
      ],
      "name": "proposeWithdrawal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        }
      ],
      "name": "instantWithdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "tokenFallback",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        },
        {
          "name": "_assetAddress",
          "type": "bytes32[]"
        },
        {
          "name": "_feeValue",
          "type": "bytes32[]"
        }
      ],
      "name": "attach",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_stageHeight",
          "type": "uint256"
        }
      ],
      "name": "getFeeWithStageHeight",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_receipt",
          "type": "bytes32[]"
        },
        {
          "name": "_receipt2",
          "type": "bytes32[]"
        }
      ],
      "name": "challengedRepeatedGSN",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_receipt",
          "type": "bytes32[]"
        },
        {
          "name": "_receipt2",
          "type": "bytes32[]"
        }
      ],
      "name": "challengedWrongBalance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_receipt",
          "type": "bytes32[]"
        },
        {
          "name": "_receipt2",
          "type": "bytes32[]"
        }
      ],
      "name": "challengedSkippedGSN",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        }
      ],
      "name": "getChallengedHash",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_parameter",
          "type": "bytes32[]"
        }
      ],
      "name": "getChallengedRepeatedGSNListInfo",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "",
  "source": "pragma solidity ^0.4.23;\n\nimport \"./Util.sol\";\nimport \"./EIP20/SafeMath.sol\";\n\ncontract Token {\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n}\n\ncontract Booster {\n    using SafeMath for uint256;\n    mapping (address => bool) public assetAddresses;\n    mapping (uint256 => Util.Stage) public stages;\n    mapping (bytes32 => Util.Log) public depositLogs;\n    mapping (bytes32 => Util.Log) public withdrawalLogs;\n\n    uint256 public stageHeight;\n    uint256 public instantWithdrawMaximum;\n    uint256 public depositSequenceNumber;\n    address public owner;\n    address public goblin;\n    address public managerAddress;\n    address[] public assetAddressesArray;\n\n    event ProposeDeposit (\n        bytes32 indexed _dsn,\n        bytes32 indexed _client,\n        bytes32 _value,\n        bytes32 _assetID\n    );\n\n    event VerifyReceipt (\n        uint256 indexed _type, // { 0: deposit, 1: proposeWithdrawal, 2: instantWithdrawal }\n        bytes32 _gsn,\n        bytes32 _lightTxHash,\n        bytes32 _fromBalance,\n        bytes32 _toBalance,\n        bytes32[3] _sigLightTx,\n        bytes32[3] _sigReceipt\n    );\n\n    event Withdraw (\n        bytes32 indexed _wsn,\n        bytes32 indexed _client,\n        bytes32 _value,\n        bytes32 _assetID\n    );\n\n    event Attach (\n        bytes32 _stageHeight,\n        bytes32 _receiptRootHash,\n        bytes32 _accountRootHash\n    );\n\n    event Challenge (\n        uint256 indexed _challengedType, // { type: 1 - 4, 1: repeatedGSN 2: wrongBalance 3: skippedGSN 4: existProof }\n        bytes32 _client,\n        bytes32 _lightTxHash\n    );\n\n    modifier onlyOwner () {\n        if (msg.sender == owner) _;\n    }\n\n    modifier onlyGoblin () {\n        if (msg.sender == goblin) _;\n    }\n\n    constructor (\n        address _boosterOwner,\n        address _goblin,\n        address[] _assetAddresses,\n        uint256 _instantWithdrawMaximum\n    ) public {\n        managerAddress = msg.sender;\n        owner = _boosterOwner;\n        goblin = _goblin;\n        instantWithdrawMaximum = _instantWithdrawMaximum;\n        stages[stageHeight].data = \"genisis stage\";\n\n        for (uint i = 0; i < _assetAddresses.length; i++) {\n            if (assetAddresses[_assetAddresses[i]] == false) {\n                assetAddresses[_assetAddresses[i]] = true;\n                assetAddressesArray.push(_assetAddresses[i]);\n            }\n        }\n    }\n\n    function setAssetAddress(address asAddress) public onlyOwner {\n        if (assetAddresses[asAddress] == false) {\n            assetAddresses[asAddress] = true;\n            assetAddressesArray.push(asAddress);\n        }\n    }\n\n    function unsetAssetAddress(address asAddress) public onlyOwner {\n        if (assetAddresses[asAddress] == true) {\n            assetAddresses[asAddress] = false;\n            // remove asset address from assetAddressesArray\n            for (uint i = 0; i < assetAddressesArray.length; i++) {\n                if (assetAddressesArray[i] == asAddress) {\n                    for (uint j = i; j < assetAddressesArray.length - 1; j++){\n                        assetAddressesArray[j] = assetAddressesArray[j + 1];\n                    }\n                    delete assetAddressesArray[assetAddressesArray.length - 1];\n                    assetAddressesArray.length--;\n                    break;\n                }\n            }\n        }\n    }\n\n    function getAssetAddressesLength() public view returns (uint256) {\n        return assetAddressesArray.length;\n    }\n\n    function proposeTokenDeposit (bytes32[] _parameter) public {\n        /*\n        _parameter[0] = client\n        _parameter[1] = value\n        _parameter[2] = assetID\n        */\n\n        address assetAddress = address(_parameter[2]);\n        require(assetAddresses[assetAddress] != false, \"Asset address invalid.\");\n        address client = address(_parameter[0]);\n        uint256 value = uint256(_parameter[1]);\n        require(Token(assetAddress).transferFrom(client, this, value), \"Approve failed.\");\n        writeDepositLog(_parameter);\n    }\n\n    function deposit (bytes32[] _parameter) public onlyOwner {\n        bytes32 dsn = bytes32(_parameter[7]);\n        require(Util.isLogValid(_parameter, depositLogs[dsn]), \"Wrong deposit log.\");\n        require(Util.isSigValid(_parameter, stageHeight + 1, owner, goblin), \"Wrong sig.\");\n        depositLogs[_parameter[7]].flag = true;\n\n        emit VerifyReceipt (\n            0,\n            _parameter[12],\n            _parameter[0],\n            _parameter[13],\n            _parameter[14],\n            [\n                _parameter[16],\n                _parameter[17],\n                _parameter[18]\n            ],\n            [\n                _parameter[19],\n                _parameter[20],\n                _parameter[21]\n            ]);\n    }\n\n    function proposeWithdrawal (bytes32[] _parameter) public {\n        require(Util.isSigValid(_parameter, stageHeight + 1, owner, goblin), \"Wrong sig.\");\n        /*\n        wsn = concat(from + nonce)\n        */\n        bytes32[] memory bytes32Array = new bytes32[](2);\n        bytes32Array[0] = _parameter[1]; // from\n        bytes32Array[1] = _parameter[6]; // nonce\n        bytes32 wsn = Util.hashArray(bytes32Array);\n\n        withdrawalLogs[wsn].stage = bytes32(stageHeight + 1);\n        withdrawalLogs[wsn].client = _parameter[1];\n        withdrawalLogs[wsn].value = _parameter[4];\n        withdrawalLogs[wsn].assetID = _parameter[3];\n\n        emit VerifyReceipt (\n            1,\n            _parameter[12],\n            _parameter[0],\n            _parameter[13],\n            _parameter[14],\n            [\n                _parameter[16],\n                _parameter[17],\n                _parameter[18]\n            ],\n            [\n                _parameter[19],\n                _parameter[20],\n                _parameter[21]\n            ]);\n    }\n\n    function withdraw (bytes32[] _parameter) public {\n        /*\n        _parameter[0] = from\n        _parameter[1] = nonce\n        */\n        // flag = false\n        bytes32[] memory bytes32Array = new bytes32[](2);\n        bytes32Array[0] = _parameter[0];\n        bytes32Array[1] = _parameter[1];\n        bytes32 wsn = Util.hashArray(bytes32Array);\n        require(withdrawalLogs[wsn].flag == false, \"Withdraw already finish.\");\n        // over challenge time\n        require (uint256(withdrawalLogs[wsn].stage) <= stageHeight, \"No over challenge time\");\n        address client = address(withdrawalLogs[wsn].client);\n        uint256 value = uint256(withdrawalLogs[wsn].value);\n        bytes32 assetID = bytes32(withdrawalLogs[wsn].assetID);\n        address assetAddress = address(assetID);\n        if (assetAddress == address(0)) {\n            client.transfer(value);\n        } else if (assetAddresses[assetAddress] != false) {\n            Token(assetAddress).transfer(client, value);\n        } else {\n            revert(\"Asset address invalid.\");\n        }\n        withdrawalLogs[wsn].flag = true;\n        emit Withdraw (wsn, bytes32(client), bytes32(value), assetID);\n    }\n\n    function instantWithdraw (bytes32[] _parameter) public {\n        require(Util.isSigValid(_parameter, stageHeight + 1, owner, goblin), \"Wrong sig.\");\n        // instantWithdraw condition\n        require (uint256(_parameter[4]) <= instantWithdrawMaximum, \"Withdraw value more than instant withdraw maximum.\");\n        /*\n        wsn = concat(from + nonce)\n        */\n        bytes32[] memory bytes32Array = new bytes32[](2);\n        bytes32Array[0] = _parameter[1]; // from\n        bytes32Array[1] = _parameter[6]; // nonce\n        bytes32 wsn = Util.hashArray(bytes32Array);\n\n        require(withdrawalLogs[wsn].flag == false, \"Withdraw already finish.\");\n        withdrawalLogs[wsn].stage = bytes32(stageHeight + 1);\n        withdrawalLogs[wsn].client = _parameter[1];\n        withdrawalLogs[wsn].value = _parameter[4];\n        withdrawalLogs[wsn].assetID = _parameter[3];\n        withdrawalLogs[wsn].flag = true;\n\n        address client = address(_parameter[1]);\n        uint256 value = uint256(_parameter[4]);\n        address assetAddress = address(_parameter[3]);\n        if (assetAddress == address(0)) {\n            client.transfer(value);\n        } else if (assetAddresses[assetAddress] != false) {\n            Token(assetAddress).transfer(client, value);\n        } else {\n            revert(\"Asset address invalid.\");\n        }\n        emit VerifyReceipt (\n            2,\n            _parameter[12],\n            _parameter[0],\n            _parameter[13],\n            _parameter[14],\n            [\n                _parameter[16],\n                _parameter[17],\n                _parameter[18]\n            ],\n            [\n                _parameter[19],\n                _parameter[20],\n                _parameter[21]\n            ]);\n    }\n\n    function () public payable {\n        /*\n        called delegateToLib to 'proposeDeposit(bytes32[])'\n        gas used : 127075\n        gad used : 106627\n        suggested gas : 150000\n        */\n        bytes32[] memory bytes32Array = new bytes32[](3);\n        bytes32Array[0] = bytes32(msg.sender);\n        bytes32Array[1] = bytes32(msg.value);\n        bytes32Array[2] = bytes32(0);\n        writeDepositLog(bytes32Array);\n    }\n\n    function tokenFallback(address _from, uint _value) public returns (bool success) {\n        if(assetAddresses[msg.sender] == false) {\n            revert(\"Asset address invalid.\");\n        } else {\n            bytes32[] memory bytes32Array = new bytes32[](3);\n            bytes32Array[0] = bytes32(_from);\n            bytes32Array[1] = bytes32(_value);\n            bytes32Array[2] = bytes32(msg.sender);\n            writeDepositLog(bytes32Array);\n            return true;\n        }\n    }\n\n    function writeDepositLog (bytes32[] _parameter) private {\n        /*\n        _parameter[0] = client\n        _parameter[1] = value\n        _parameter[2] = assetID\n        */\n\n        bytes32 dsn = bytes32(depositSequenceNumber);\n        depositLogs[dsn].stage = bytes32(stageHeight + 1);\n        depositLogs[dsn].client = _parameter[0];\n        depositLogs[dsn].value = _parameter[1];\n        depositLogs[dsn].assetID = _parameter[2];\n        depositSequenceNumber++;\n        emit ProposeDeposit (dsn, _parameter[0], _parameter[1], _parameter[2]);\n    }\n\n    function attach (bytes32[] _parameter, bytes32[] _assetAddress, bytes32[] _feeValue) public onlyGoblin {\n        require(_assetAddress.length == _feeValue.length, \"Array length error.\");\n        /*\n        _parameter[0] = _receiptRootHash\n        _parameter[1] = _accountRootHash\n        _parameter[2] = _data\n        */\n        stageHeight++;\n        stages[stageHeight].receiptRootHash = _parameter[0];\n        stages[stageHeight].accountRootHash = _parameter[1];\n        stages[stageHeight].data = _parameter[2];\n        for (uint i = 0; i < _assetAddress.length; i++) {\n            stages[stageHeight].fee[address(_assetAddress[i])].value = uint256(_feeValue[i]);\n        }\n        emit Attach (bytes32(stageHeight), _parameter[0], _parameter[1]);\n    }\n\n    function getFeeWithStageHeight (uint256 _stageHeight) public onlyGoblin {\n        require(_stageHeight <= stageHeight, \"No over challenge time.\");\n        //ETH fee\n        uint256 ethFeeValue = stages[_stageHeight].fee[address(0)].value;\n        bool isFeeWithdrawed = stages[_stageHeight].fee[address(0)].withdrawed;\n        if (isFeeWithdrawed == false && ethFeeValue > 0) {\n            stages[_stageHeight].fee[address(0)].withdrawed = true;\n            goblin.transfer(ethFeeValue);\n        }\n        // Token fee\n        for (uint i = 0; i < assetAddressesArray.length; i++) {\n            address assetAddress = assetAddressesArray[i];\n            isFeeWithdrawed = stages[_stageHeight].fee[assetAddress].withdrawed;\n            uint256 tokenFeeValue = stages[_stageHeight].fee[assetAddress].value;\n            if (isFeeWithdrawed == false && tokenFeeValue > 0) {\n                stages[_stageHeight].fee[assetAddress].withdrawed = true;\n                Token(assetAddress).transfer(goblin, tokenFeeValue);\n            }\n        }\n    }\n    \n    function challengedRepeatedGSN (bytes32[] _receipt, bytes32[] _receipt2) public {\n        require(Util.isSigValid(_receipt, stageHeight, owner, goblin), \"Receipt1 is invalid.\");\n        require(Util.isSigValid(_receipt2, stageHeight, owner, goblin), \"Receipt2 is invalid.\");\n        require (uint256(_receipt[12]) == uint256(_receipt2[12]), \"No repeat gsn.\"); // compare gsn\n        stages[stageHeight].challengedRepeatedGSNList[_receipt2[12]] = Util.ChallengedInfo(\n            bytes32(msg.sender), [_receipt[12], _receipt2[12]], true, false);\n        stages[stageHeight].challengedGsn.push(_receipt2[12]);\n        emit Challenge (1, bytes32(msg.sender), _receipt2[12]);\n    }\n\n    function challengedWrongBalance (bytes32[] _receipt, bytes32[] _receipt2) public {\n        require(Util.isSigValid(_receipt, stageHeight, owner, goblin), \"Receipt1 is invalid.\");\n        require(Util.isSigValid(_receipt2, stageHeight, owner, goblin), \"Receipt2 is invalid.\");\n        bool flag = false;\n        if (address(_receipt2[1]) == address(_receipt[1])) { // from = from\n            if ((uint256(_receipt2[13]).add(uint256(_receipt2[4]))) != uint256(_receipt[13])) {\n                flag = true;\n            }\n        } else if (address(_receipt2[1]) == address(_receipt[2])) { // from = to\n            if ((uint256(_receipt2[13]).add(uint256(_receipt2[4]))) != uint256(_receipt[14])) {\n                flag = true;\n            }\n        } else if (address(_receipt2[2]) == address(_receipt[1])) { // to = from\n            if ((uint256(_receipt2[13]).sub(uint256(_receipt2[4]))) != uint256(_receipt[13])) {\n                flag = true;\n            }\n        } else if (address(_receipt2[2]) == address(_receipt[2])) { // to = to\n            if ((uint256(_receipt2[13]).sub(uint256(_receipt2[4]))) != uint256(_receipt[14])) {\n                flag = true;\n            }\n        } else {\n            revert(\"Receipts error.\");\n        }\n        if (flag) {\n            stages[stageHeight].challengedWrongBalanceList[_receipt2[12]] = Util.ChallengedInfo(\n            bytes32(msg.sender), [_receipt[12], _receipt2[12]], true, false);\n            stages[stageHeight].challengedGsn.push(_receipt2[12]);\n            emit Challenge (2, bytes32(msg.sender), _receipt2[12]);\n        }\n    }\n\n    function challengedSkippedGSN (bytes32[] _receipt, bytes32[] _receipt2) public {\n        require(Util.isSigValid(_receipt, stageHeight, owner, goblin), \"Receipt1 is invalid.\");\n        require(Util.isSigValid(_receipt2, stageHeight, owner, goblin), \"Receipt2 is invalid.\");\n        require (uint256(_receipt2[12]).sub(uint256(_receipt[12])) != 1, \"No skip gsn.\");\n        stages[stageHeight].challengedSkippedGSNList[_receipt2[12]] = Util.ChallengedInfo(\n            bytes32(msg.sender), [_receipt[12], _receipt2[12]], true, false);\n        stages[stageHeight].challengedGsn.push(_receipt2[12]);\n        emit Challenge (3, bytes32(msg.sender), _receipt2[12]);\n    }\n\n    // function challengedExistedProof (bytes32[] _parameter) public {\n    //     require(Util.isSigValid(_parameter, stageHeight, owner, goblin), \"Receipt is invalid.\");\n    //     stages[uint256(_parameter[35])].challengedExistedProofList[_parameter[13]] = Util.ChallengedInfo(bytes32(msg.sender), [_parameter[13], 0x0], true, false);\n    //     stages[uint256(_parameter[12])].challengedGsn.push(_parameter[13]);\n    //     emit Challenge (4, bytes32(msg.sender), _parameter[13]);\n    // }\n\n    function getChallengedHash (bytes32[] _parameter) public view returns (bytes32) {\n        /*\n        parameter[0] = _stageHeight,\n        parameter[1] = _challengeNumber\n        */\n        return stages[uint256(_parameter[0])].challengedGsn[uint256(_parameter[1])];\n    }\n\n    function getChallengedRepeatedGSNListInfo (bytes32[] _parameter) public view returns (bytes32, bytes32, bytes32, bool, bool) {\n        /*\n        parameter[0] = _stageHeight,\n        parameter[1] = _lightTxHash\n        */\n        return (stages[uint256(_parameter[0])].challengedRepeatedGSNList[_parameter[1]].client,\n        stages[uint256(_parameter[0])].challengedRepeatedGSNList[_parameter[1]].gsn[0],\n        stages[uint256(_parameter[0])].challengedRepeatedGSNList[_parameter[1]].gsn[1],\n        stages[uint256(_parameter[0])].challengedRepeatedGSNList[_parameter[1]].challengedState,\n        stages[uint256(_parameter[0])].challengedRepeatedGSNList[_parameter[1]].getCompensation);\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1"
}